<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://stg-api.vericite.com/api/v1');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return DefaultApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * adminConsumerNewConsumerKeyCreatePost
     *
     * 
     *
     * @param string $new_consumer_key Key for the new consumer (required)
     * @param string $consumer requesting consumer (required)
     * @param string $consumer_secret requesting consumer secret (required)
     * @param \Swagger\Client\Model\ConsumerData $consumer_data  (required)
     * @return \Swagger\Client\Model\ConsumerResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function adminConsumerNewConsumerKeyCreatePost($new_consumer_key, $consumer, $consumer_secret, $consumer_data)
    {
        list($response, $statusCode, $httpHeader) = $this->adminConsumerNewConsumerKeyCreatePostWithHttpInfo ($new_consumer_key, $consumer, $consumer_secret, $consumer_data);
        return $response; 
    }


    /**
     * adminConsumerNewConsumerKeyCreatePostWithHttpInfo
     *
     * 
     *
     * @param string $new_consumer_key Key for the new consumer (required)
     * @param string $consumer requesting consumer (required)
     * @param string $consumer_secret requesting consumer secret (required)
     * @param \Swagger\Client\Model\ConsumerData $consumer_data  (required)
     * @return Array of \Swagger\Client\Model\ConsumerResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function adminConsumerNewConsumerKeyCreatePostWithHttpInfo($new_consumer_key, $consumer, $consumer_secret, $consumer_data)
    {
        
        // verify the required parameter 'new_consumer_key' is set
        if ($new_consumer_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_consumer_key when calling adminConsumerNewConsumerKeyCreatePost');
        }
        // verify the required parameter 'consumer' is set
        if ($consumer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer when calling adminConsumerNewConsumerKeyCreatePost');
        }
        // verify the required parameter 'consumer_secret' is set
        if ($consumer_secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer_secret when calling adminConsumerNewConsumerKeyCreatePost');
        }
        // verify the required parameter 'consumer_data' is set
        if ($consumer_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer_data when calling adminConsumerNewConsumerKeyCreatePost');
        }
  
        // parse inputs
        $resourcePath = "/admin/consumer/{newConsumerKey}/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($consumer !== null) {
            $headerParams['consumer'] = $this->apiClient->getSerializer()->toHeaderValue($consumer);
        }// header params
        
        if ($consumer_secret !== null) {
            $headerParams['consumerSecret'] = $this->apiClient->getSerializer()->toHeaderValue($consumer_secret);
        }
        // path params
        
        if ($new_consumer_key !== null) {
            $resourcePath = str_replace(
                "{" . "newConsumerKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($new_consumer_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($consumer_data)) {
            $_tempBody = $consumer_data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\ConsumerResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\ConsumerResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ConsumerResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * adminConsumerNewConsumerKeyUpdatePut
     *
     * 
     *
     * @param string $new_consumer_key Key for the consumer to update (required)
     * @param string $consumer requesting consumer (required)
     * @param string $consumer_secret requesting consumer secret (required)
     * @param \Swagger\Client\Model\ConsumerData $consumer_data  (required)
     * @return \Swagger\Client\Model\ConsumerResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function adminConsumerNewConsumerKeyUpdatePut($new_consumer_key, $consumer, $consumer_secret, $consumer_data)
    {
        list($response, $statusCode, $httpHeader) = $this->adminConsumerNewConsumerKeyUpdatePutWithHttpInfo ($new_consumer_key, $consumer, $consumer_secret, $consumer_data);
        return $response; 
    }


    /**
     * adminConsumerNewConsumerKeyUpdatePutWithHttpInfo
     *
     * 
     *
     * @param string $new_consumer_key Key for the consumer to update (required)
     * @param string $consumer requesting consumer (required)
     * @param string $consumer_secret requesting consumer secret (required)
     * @param \Swagger\Client\Model\ConsumerData $consumer_data  (required)
     * @return Array of \Swagger\Client\Model\ConsumerResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function adminConsumerNewConsumerKeyUpdatePutWithHttpInfo($new_consumer_key, $consumer, $consumer_secret, $consumer_data)
    {
        
        // verify the required parameter 'new_consumer_key' is set
        if ($new_consumer_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_consumer_key when calling adminConsumerNewConsumerKeyUpdatePut');
        }
        // verify the required parameter 'consumer' is set
        if ($consumer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer when calling adminConsumerNewConsumerKeyUpdatePut');
        }
        // verify the required parameter 'consumer_secret' is set
        if ($consumer_secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer_secret when calling adminConsumerNewConsumerKeyUpdatePut');
        }
        // verify the required parameter 'consumer_data' is set
        if ($consumer_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer_data when calling adminConsumerNewConsumerKeyUpdatePut');
        }
  
        // parse inputs
        $resourcePath = "/admin/consumer/{newConsumerKey}/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($consumer !== null) {
            $headerParams['consumer'] = $this->apiClient->getSerializer()->toHeaderValue($consumer);
        }// header params
        
        if ($consumer_secret !== null) {
            $headerParams['consumerSecret'] = $this->apiClient->getSerializer()->toHeaderValue($consumer_secret);
        }
        // path params
        
        if ($new_consumer_key !== null) {
            $resourcePath = str_replace(
                "{" . "newConsumerKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($new_consumer_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($consumer_data)) {
            $_tempBody = $consumer_data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\ConsumerResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\ConsumerResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ConsumerResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * assignmentsContextIDAssignmentIDPost
     *
     * 
     *
     * @param string $context_id Context ID (required)
     * @param string $assignment_id ID of assignment (required)
     * @param string $consumer the consumer (required)
     * @param string $consumer_secret the consumer secret (required)
     * @param \Swagger\Client\Model\AssignmentData $assignment_data  (required)
     * @return \Swagger\Client\Model\ExternalContentUploadInfo[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function assignmentsContextIDAssignmentIDPost($context_id, $assignment_id, $consumer, $consumer_secret, $assignment_data)
    {
        list($response, $statusCode, $httpHeader) = $this->assignmentsContextIDAssignmentIDPostWithHttpInfo ($context_id, $assignment_id, $consumer, $consumer_secret, $assignment_data);
        return $response; 
    }


    /**
     * assignmentsContextIDAssignmentIDPostWithHttpInfo
     *
     * 
     *
     * @param string $context_id Context ID (required)
     * @param string $assignment_id ID of assignment (required)
     * @param string $consumer the consumer (required)
     * @param string $consumer_secret the consumer secret (required)
     * @param \Swagger\Client\Model\AssignmentData $assignment_data  (required)
     * @return Array of \Swagger\Client\Model\ExternalContentUploadInfo[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function assignmentsContextIDAssignmentIDPostWithHttpInfo($context_id, $assignment_id, $consumer, $consumer_secret, $assignment_data)
    {
        
        // verify the required parameter 'context_id' is set
        if ($context_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context_id when calling assignmentsContextIDAssignmentIDPost');
        }
        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment_id when calling assignmentsContextIDAssignmentIDPost');
        }
        // verify the required parameter 'consumer' is set
        if ($consumer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer when calling assignmentsContextIDAssignmentIDPost');
        }
        // verify the required parameter 'consumer_secret' is set
        if ($consumer_secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer_secret when calling assignmentsContextIDAssignmentIDPost');
        }
        // verify the required parameter 'assignment_data' is set
        if ($assignment_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment_data when calling assignmentsContextIDAssignmentIDPost');
        }
  
        // parse inputs
        $resourcePath = "/assignments/{contextID}/{assignmentID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($consumer !== null) {
            $headerParams['consumer'] = $this->apiClient->getSerializer()->toHeaderValue($consumer);
        }// header params
        
        if ($consumer_secret !== null) {
            $headerParams['consumerSecret'] = $this->apiClient->getSerializer()->toHeaderValue($consumer_secret);
        }
        // path params
        
        if ($context_id !== null) {
            $resourcePath = str_replace(
                "{" . "contextID" . "}",
                $this->apiClient->getSerializer()->toPathValue($context_id),
                $resourcePath
            );
        }// path params
        
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "assignmentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($assignment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($assignment_data)) {
            $_tempBody = $assignment_data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\ExternalContentUploadInfo[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\ExternalContentUploadInfo[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExternalContentUploadInfo[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * reportsScoresContextIDGet
     *
     * 
     *
     * @param string $context_id Context ID (required)
     * @param string $consumer the consumer (required)
     * @param string $consumer_secret the consumer secret (required)
     * @param string $assignment_id ID of assignment (optional)
     * @param string $user_id ID of user (optional)
     * @param string $external_content_id external content id (optional)
     * @return \Swagger\Client\Model\ReportScoreReponse[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reportsScoresContextIDGet($context_id, $consumer, $consumer_secret, $assignment_id = null, $user_id = null, $external_content_id = null)
    {
        list($response, $statusCode, $httpHeader) = $this->reportsScoresContextIDGetWithHttpInfo ($context_id, $consumer, $consumer_secret, $assignment_id, $user_id, $external_content_id);
        return $response; 
    }


    /**
     * reportsScoresContextIDGetWithHttpInfo
     *
     * 
     *
     * @param string $context_id Context ID (required)
     * @param string $consumer the consumer (required)
     * @param string $consumer_secret the consumer secret (required)
     * @param string $assignment_id ID of assignment (optional)
     * @param string $user_id ID of user (optional)
     * @param string $external_content_id external content id (optional)
     * @return Array of \Swagger\Client\Model\ReportScoreReponse[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reportsScoresContextIDGetWithHttpInfo($context_id, $consumer, $consumer_secret, $assignment_id = null, $user_id = null, $external_content_id = null)
    {
        
        // verify the required parameter 'context_id' is set
        if ($context_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context_id when calling reportsScoresContextIDGet');
        }
        // verify the required parameter 'consumer' is set
        if ($consumer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer when calling reportsScoresContextIDGet');
        }
        // verify the required parameter 'consumer_secret' is set
        if ($consumer_secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer_secret when calling reportsScoresContextIDGet');
        }
  
        // parse inputs
        $resourcePath = "/reports/scores/{contextID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($assignment_id !== null) {
            $queryParams['assignmentID'] = $this->apiClient->getSerializer()->toQueryValue($assignment_id);
        }// query params
        
        if ($user_id !== null) {
            $queryParams['userID'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }// query params
        
        if ($external_content_id !== null) {
            $queryParams['externalContentID'] = $this->apiClient->getSerializer()->toQueryValue($external_content_id);
        }
        // header params
        
        if ($consumer !== null) {
            $headerParams['consumer'] = $this->apiClient->getSerializer()->toHeaderValue($consumer);
        }// header params
        
        if ($consumer_secret !== null) {
            $headerParams['consumerSecret'] = $this->apiClient->getSerializer()->toHeaderValue($consumer_secret);
        }
        // path params
        
        if ($context_id !== null) {
            $resourcePath = str_replace(
                "{" . "contextID" . "}",
                $this->apiClient->getSerializer()->toPathValue($context_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\ReportScoreReponse[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\ReportScoreReponse[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ReportScoreReponse[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * reportsSubmitRequestContextIDAssignmentIDUserIDPost
     *
     * 
     *
     * @param string $context_id Context ID (required)
     * @param string $assignment_id ID of assignment (required)
     * @param string $user_id ID of user (required)
     * @param string $consumer the consumer (required)
     * @param string $consumer_secret the consumer secret (required)
     * @param \Swagger\Client\Model\ReportMetaData $report_meta_data  (required)
     * @return \Swagger\Client\Model\ExternalContentUploadInfo[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reportsSubmitRequestContextIDAssignmentIDUserIDPost($context_id, $assignment_id, $user_id, $consumer, $consumer_secret, $report_meta_data)
    {
        list($response, $statusCode, $httpHeader) = $this->reportsSubmitRequestContextIDAssignmentIDUserIDPostWithHttpInfo ($context_id, $assignment_id, $user_id, $consumer, $consumer_secret, $report_meta_data);
        return $response; 
    }


    /**
     * reportsSubmitRequestContextIDAssignmentIDUserIDPostWithHttpInfo
     *
     * 
     *
     * @param string $context_id Context ID (required)
     * @param string $assignment_id ID of assignment (required)
     * @param string $user_id ID of user (required)
     * @param string $consumer the consumer (required)
     * @param string $consumer_secret the consumer secret (required)
     * @param \Swagger\Client\Model\ReportMetaData $report_meta_data  (required)
     * @return Array of \Swagger\Client\Model\ExternalContentUploadInfo[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reportsSubmitRequestContextIDAssignmentIDUserIDPostWithHttpInfo($context_id, $assignment_id, $user_id, $consumer, $consumer_secret, $report_meta_data)
    {
        
        // verify the required parameter 'context_id' is set
        if ($context_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context_id when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost');
        }
        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment_id when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost');
        }
        // verify the required parameter 'consumer' is set
        if ($consumer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost');
        }
        // verify the required parameter 'consumer_secret' is set
        if ($consumer_secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer_secret when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost');
        }
        // verify the required parameter 'report_meta_data' is set
        if ($report_meta_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $report_meta_data when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost');
        }
  
        // parse inputs
        $resourcePath = "/reports/submit/request/{contextID}/{assignmentID}/{userID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($consumer !== null) {
            $headerParams['consumer'] = $this->apiClient->getSerializer()->toHeaderValue($consumer);
        }// header params
        
        if ($consumer_secret !== null) {
            $headerParams['consumerSecret'] = $this->apiClient->getSerializer()->toHeaderValue($consumer_secret);
        }
        // path params
        
        if ($context_id !== null) {
            $resourcePath = str_replace(
                "{" . "contextID" . "}",
                $this->apiClient->getSerializer()->toPathValue($context_id),
                $resourcePath
            );
        }// path params
        
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "assignmentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($assignment_id),
                $resourcePath
            );
        }// path params
        
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userID" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($report_meta_data)) {
            $_tempBody = $report_meta_data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\ExternalContentUploadInfo[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\ExternalContentUploadInfo[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExternalContentUploadInfo[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * reportsUrlsContextIDGet
     *
     * 
     *
     * @param string $context_id Context ID (required)
     * @param string $assignment_id_filter ID of assignment to filter results on (required)
     * @param string $consumer the consumer (required)
     * @param string $consumer_secret the consumer secret (required)
     * @param string $token_user ID of user who will view the report (required)
     * @param string $token_user_role role of user who will view the report (required)
     * @param string $user_id_filter ID of user to filter results on (optional)
     * @param string $external_content_id_filter external content id to filter results on (optional)
     * @return \Swagger\Client\Model\ReportURLLinkReponse[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reportsUrlsContextIDGet($context_id, $assignment_id_filter, $consumer, $consumer_secret, $token_user, $token_user_role, $user_id_filter = null, $external_content_id_filter = null)
    {
        list($response, $statusCode, $httpHeader) = $this->reportsUrlsContextIDGetWithHttpInfo ($context_id, $assignment_id_filter, $consumer, $consumer_secret, $token_user, $token_user_role, $user_id_filter, $external_content_id_filter);
        return $response; 
    }


    /**
     * reportsUrlsContextIDGetWithHttpInfo
     *
     * 
     *
     * @param string $context_id Context ID (required)
     * @param string $assignment_id_filter ID of assignment to filter results on (required)
     * @param string $consumer the consumer (required)
     * @param string $consumer_secret the consumer secret (required)
     * @param string $token_user ID of user who will view the report (required)
     * @param string $token_user_role role of user who will view the report (required)
     * @param string $user_id_filter ID of user to filter results on (optional)
     * @param string $external_content_id_filter external content id to filter results on (optional)
     * @return Array of \Swagger\Client\Model\ReportURLLinkReponse[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reportsUrlsContextIDGetWithHttpInfo($context_id, $assignment_id_filter, $consumer, $consumer_secret, $token_user, $token_user_role, $user_id_filter = null, $external_content_id_filter = null)
    {
        
        // verify the required parameter 'context_id' is set
        if ($context_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context_id when calling reportsUrlsContextIDGet');
        }
        // verify the required parameter 'assignment_id_filter' is set
        if ($assignment_id_filter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment_id_filter when calling reportsUrlsContextIDGet');
        }
        // verify the required parameter 'consumer' is set
        if ($consumer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer when calling reportsUrlsContextIDGet');
        }
        // verify the required parameter 'consumer_secret' is set
        if ($consumer_secret === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consumer_secret when calling reportsUrlsContextIDGet');
        }
        // verify the required parameter 'token_user' is set
        if ($token_user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token_user when calling reportsUrlsContextIDGet');
        }
        // verify the required parameter 'token_user_role' is set
        if ($token_user_role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token_user_role when calling reportsUrlsContextIDGet');
        }
  
        // parse inputs
        $resourcePath = "/reports/urls/{contextID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($assignment_id_filter !== null) {
            $queryParams['assignmentIDFilter'] = $this->apiClient->getSerializer()->toQueryValue($assignment_id_filter);
        }// query params
        
        if ($user_id_filter !== null) {
            $queryParams['userIDFilter'] = $this->apiClient->getSerializer()->toQueryValue($user_id_filter);
        }// query params
        
        if ($external_content_id_filter !== null) {
            $queryParams['externalContentIDFilter'] = $this->apiClient->getSerializer()->toQueryValue($external_content_id_filter);
        }// query params
        
        if ($token_user !== null) {
            $queryParams['tokenUser'] = $this->apiClient->getSerializer()->toQueryValue($token_user);
        }// query params
        
        if ($token_user_role !== null) {
            $queryParams['tokenUserRole'] = $this->apiClient->getSerializer()->toQueryValue($token_user_role);
        }
        // header params
        
        if ($consumer !== null) {
            $headerParams['consumer'] = $this->apiClient->getSerializer()->toHeaderValue($consumer);
        }// header params
        
        if ($consumer_secret !== null) {
            $headerParams['consumerSecret'] = $this->apiClient->getSerializer()->toHeaderValue($consumer_secret);
        }
        // path params
        
        if ($context_id !== null) {
            $resourcePath = str_replace(
                "{" . "contextID" . "}",
                $this->apiClient->getSerializer()->toPathValue($context_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\ReportURLLinkReponse[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\ReportURLLinkReponse[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ReportURLLinkReponse[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
