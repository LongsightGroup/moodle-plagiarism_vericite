<?php
/**
 * ReportMetaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VeriCiteLmsApiV1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ReportMetaData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReportMetaData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'reportMetaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assignment_title' => 'string',
        'context_title' => 'string',
        'external_content_data' => '\Swagger\Client\Model\AssignmentscontextIDassignmentIDAssignmentAttachmentExternalContent[]',
        'user_email' => 'string',
        'user_first_name' => 'string',
        'user_last_name' => 'string',
        'user_role' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'assignment_title' => 'assignmentTitle',
        'context_title' => 'contextTitle',
        'external_content_data' => 'externalContentData',
        'user_email' => 'userEmail',
        'user_first_name' => 'userFirstName',
        'user_last_name' => 'userLastName',
        'user_role' => 'userRole'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'assignment_title' => 'setAssignmentTitle',
        'context_title' => 'setContextTitle',
        'external_content_data' => 'setExternalContentData',
        'user_email' => 'setUserEmail',
        'user_first_name' => 'setUserFirstName',
        'user_last_name' => 'setUserLastName',
        'user_role' => 'setUserRole'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'assignment_title' => 'getAssignmentTitle',
        'context_title' => 'getContextTitle',
        'external_content_data' => 'getExternalContentData',
        'user_email' => 'getUserEmail',
        'user_first_name' => 'getUserFirstName',
        'user_last_name' => 'getUserLastName',
        'user_role' => 'getUserRole'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assignment_title'] = isset($data['assignment_title']) ? $data['assignment_title'] : null;
        $this->container['context_title'] = isset($data['context_title']) ? $data['context_title'] : null;
        $this->container['external_content_data'] = isset($data['external_content_data']) ? $data['external_content_data'] : null;
        $this->container['user_email'] = isset($data['user_email']) ? $data['user_email'] : null;
        $this->container['user_first_name'] = isset($data['user_first_name']) ? $data['user_first_name'] : null;
        $this->container['user_last_name'] = isset($data['user_last_name']) ? $data['user_last_name'] : null;
        $this->container['user_role'] = isset($data['user_role']) ? $data['user_role'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['external_content_data'] === null) {
            $invalid_properties[] = "'external_content_data' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['external_content_data'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets assignment_title
     * @return string
     */
    public function getAssignmentTitle()
    {
        return $this->container['assignment_title'];
    }

    /**
     * Sets assignment_title
     * @param string $assignment_title Title of Assignment
     * @return $this
     */
    public function setAssignmentTitle($assignment_title)
    {
        $this->container['assignment_title'] = $assignment_title;

        return $this;
    }

    /**
     * Gets context_title
     * @return string
     */
    public function getContextTitle()
    {
        return $this->container['context_title'];
    }

    /**
     * Sets context_title
     * @param string $context_title Title of Context
     * @return $this
     */
    public function setContextTitle($context_title)
    {
        $this->container['context_title'] = $context_title;

        return $this;
    }

    /**
     * Gets external_content_data
     * @return \Swagger\Client\Model\AssignmentscontextIDassignmentIDAssignmentAttachmentExternalContent[]
     */
    public function getExternalContentData()
    {
        return $this->container['external_content_data'];
    }

    /**
     * Sets external_content_data
     * @param \Swagger\Client\Model\AssignmentscontextIDassignmentIDAssignmentAttachmentExternalContent[] $external_content_data
     * @return $this
     */
    public function setExternalContentData($external_content_data)
    {
        $this->container['external_content_data'] = $external_content_data;

        return $this;
    }

    /**
     * Gets user_email
     * @return string
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     * @param string $user_email Users Email
     * @return $this
     */
    public function setUserEmail($user_email)
    {
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets user_first_name
     * @return string
     */
    public function getUserFirstName()
    {
        return $this->container['user_first_name'];
    }

    /**
     * Sets user_first_name
     * @param string $user_first_name Users First Name
     * @return $this
     */
    public function setUserFirstName($user_first_name)
    {
        $this->container['user_first_name'] = $user_first_name;

        return $this;
    }

    /**
     * Gets user_last_name
     * @return string
     */
    public function getUserLastName()
    {
        return $this->container['user_last_name'];
    }

    /**
     * Sets user_last_name
     * @param string $user_last_name Users Last Name
     * @return $this
     */
    public function setUserLastName($user_last_name)
    {
        $this->container['user_last_name'] = $user_last_name;

        return $this;
    }

    /**
     * Gets user_role
     * @return string
     */
    public function getUserRole()
    {
        return $this->container['user_role'];
    }

    /**
     * Sets user_role
     * @param string $user_role User Role
     * @return $this
     */
    public function setUserRole($user_role)
    {
        $this->container['user_role'] = $user_role;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


