<?php
/**
 * ReportMetaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * ReportMetaData Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReportMetaData implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'user_first_name' => 'string',
        'user_last_name' => 'string',
        'user_email' => 'string',
        'user_role' => 'string',
        'assignment_title' => 'string',
        'context_title' => 'string',
        'external_content_data' => '\Swagger\Client\Model\ExternalContentData[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'user_first_name' => 'userFirstName',
        'user_last_name' => 'userLastName',
        'user_email' => 'userEmail',
        'user_role' => 'userRole',
        'assignment_title' => 'assignmentTitle',
        'context_title' => 'contextTitle',
        'external_content_data' => 'externalContentData'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'user_first_name' => 'setUserFirstName',
        'user_last_name' => 'setUserLastName',
        'user_email' => 'setUserEmail',
        'user_role' => 'setUserRole',
        'assignment_title' => 'setAssignmentTitle',
        'context_title' => 'setContextTitle',
        'external_content_data' => 'setExternalContentData'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'user_first_name' => 'getUserFirstName',
        'user_last_name' => 'getUserLastName',
        'user_email' => 'getUserEmail',
        'user_role' => 'getUserRole',
        'assignment_title' => 'getAssignmentTitle',
        'context_title' => 'getContextTitle',
        'external_content_data' => 'getExternalContentData'
    );
  
    
    /**
      * $user_first_name Users First Name
      * @var string
      */
    protected $user_first_name;
    
    /**
      * $user_last_name Users Last Name
      * @var string
      */
    protected $user_last_name;
    
    /**
      * $user_email Users Email
      * @var string
      */
    protected $user_email;
    
    /**
      * $user_role User Role
      * @var string
      */
    protected $user_role;
    
    /**
      * $assignment_title Title of Assignment
      * @var string
      */
    protected $assignment_title;
    
    /**
      * $context_title Title of Context
      * @var string
      */
    protected $context_title;
    
    /**
      * $external_content_data 
      * @var \Swagger\Client\Model\ExternalContentData[]
      */
    protected $external_content_data;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->user_first_name = $data["user_first_name"];
            $this->user_last_name = $data["user_last_name"];
            $this->user_email = $data["user_email"];
            $this->user_role = $data["user_role"];
            $this->assignment_title = $data["assignment_title"];
            $this->context_title = $data["context_title"];
            $this->external_content_data = $data["external_content_data"];
        }
    }
    
    /**
     * Gets user_first_name
     * @return string
     */
    public function getUserFirstName()
    {
        return $this->user_first_name;
    }
  
    /**
     * Sets user_first_name
     * @param string $user_first_name Users First Name
     * @return $this
     */
    public function setUserFirstName($user_first_name)
    {
        
        $this->user_first_name = $user_first_name;
        return $this;
    }
    
    /**
     * Gets user_last_name
     * @return string
     */
    public function getUserLastName()
    {
        return $this->user_last_name;
    }
  
    /**
     * Sets user_last_name
     * @param string $user_last_name Users Last Name
     * @return $this
     */
    public function setUserLastName($user_last_name)
    {
        
        $this->user_last_name = $user_last_name;
        return $this;
    }
    
    /**
     * Gets user_email
     * @return string
     */
    public function getUserEmail()
    {
        return $this->user_email;
    }
  
    /**
     * Sets user_email
     * @param string $user_email Users Email
     * @return $this
     */
    public function setUserEmail($user_email)
    {
        
        $this->user_email = $user_email;
        return $this;
    }
    
    /**
     * Gets user_role
     * @return string
     */
    public function getUserRole()
    {
        return $this->user_role;
    }
  
    /**
     * Sets user_role
     * @param string $user_role User Role
     * @return $this
     */
    public function setUserRole($user_role)
    {
        
        $this->user_role = $user_role;
        return $this;
    }
    
    /**
     * Gets assignment_title
     * @return string
     */
    public function getAssignmentTitle()
    {
        return $this->assignment_title;
    }
  
    /**
     * Sets assignment_title
     * @param string $assignment_title Title of Assignment
     * @return $this
     */
    public function setAssignmentTitle($assignment_title)
    {
        
        $this->assignment_title = $assignment_title;
        return $this;
    }
    
    /**
     * Gets context_title
     * @return string
     */
    public function getContextTitle()
    {
        return $this->context_title;
    }
  
    /**
     * Sets context_title
     * @param string $context_title Title of Context
     * @return $this
     */
    public function setContextTitle($context_title)
    {
        
        $this->context_title = $context_title;
        return $this;
    }
    
    /**
     * Gets external_content_data
     * @return \Swagger\Client\Model\ExternalContentData[]
     */
    public function getExternalContentData()
    {
        return $this->external_content_data;
    }
  
    /**
     * Sets external_content_data
     * @param \Swagger\Client\Model\ExternalContentData[] $external_content_data 
     * @return $this
     */
    public function setExternalContentData($external_content_data)
    {
        
        $this->external_content_data = $external_content_data;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
