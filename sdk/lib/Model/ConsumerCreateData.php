<?php
/**
 * ConsumerCreateData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * ConsumerCreateData Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConsumerCreateData implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'description' => 'string',
        'trial' => 'bool',
        'trial_end_date' => 'int',
        'contact_email' => 'string',
        'contact_name' => 'string',
        'time_zone' => 'string',
        'fte_count' => 'int',
        'notes' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'description' => 'description',
        'trial' => 'trial',
        'trial_end_date' => 'trialEndDate',
        'contact_email' => 'contactEmail',
        'contact_name' => 'contactName',
        'time_zone' => 'timeZone',
        'fte_count' => 'fteCount',
        'notes' => 'notes'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'description' => 'setDescription',
        'trial' => 'setTrial',
        'trial_end_date' => 'setTrialEndDate',
        'contact_email' => 'setContactEmail',
        'contact_name' => 'setContactName',
        'time_zone' => 'setTimeZone',
        'fte_count' => 'setFteCount',
        'notes' => 'setNotes'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'description' => 'getDescription',
        'trial' => 'getTrial',
        'trial_end_date' => 'getTrialEndDate',
        'contact_email' => 'getContactEmail',
        'contact_name' => 'getContactName',
        'time_zone' => 'getTimeZone',
        'fte_count' => 'getFteCount',
        'notes' => 'getNotes'
    );
  
    
    /**
      * $description Description
      * @var string
      */
    protected $description;
    
    /**
      * $trial Is Trial?
      * @var bool
      */
    protected $trial;
    
    /**
      * $trial_end_date Trial End Date
      * @var int
      */
    protected $trial_end_date;
    
    /**
      * $contact_email Contact Email
      * @var string
      */
    protected $contact_email;
    
    /**
      * $contact_name Contact Name
      * @var string
      */
    protected $contact_name;
    
    /**
      * $time_zone Time Zone
      * @var string
      */
    protected $time_zone;
    
    /**
      * $fte_count FTE Student Count
      * @var int
      */
    protected $fte_count;
    
    /**
      * $notes Additional Notes
      * @var string
      */
    protected $notes;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->description = $data["description"];
            $this->trial = $data["trial"];
            $this->trial_end_date = $data["trial_end_date"];
            $this->contact_email = $data["contact_email"];
            $this->contact_name = $data["contact_name"];
            $this->time_zone = $data["time_zone"];
            $this->fte_count = $data["fte_count"];
            $this->notes = $data["notes"];
        }
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description Description
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets trial
     * @return bool
     */
    public function getTrial()
    {
        return $this->trial;
    }
  
    /**
     * Sets trial
     * @param bool $trial Is Trial?
     * @return $this
     */
    public function setTrial($trial)
    {
        
        $this->trial = $trial;
        return $this;
    }
    
    /**
     * Gets trial_end_date
     * @return int
     */
    public function getTrialEndDate()
    {
        return $this->trial_end_date;
    }
  
    /**
     * Sets trial_end_date
     * @param int $trial_end_date Trial End Date
     * @return $this
     */
    public function setTrialEndDate($trial_end_date)
    {
        
        $this->trial_end_date = $trial_end_date;
        return $this;
    }
    
    /**
     * Gets contact_email
     * @return string
     */
    public function getContactEmail()
    {
        return $this->contact_email;
    }
  
    /**
     * Sets contact_email
     * @param string $contact_email Contact Email
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        
        $this->contact_email = $contact_email;
        return $this;
    }
    
    /**
     * Gets contact_name
     * @return string
     */
    public function getContactName()
    {
        return $this->contact_name;
    }
  
    /**
     * Sets contact_name
     * @param string $contact_name Contact Name
     * @return $this
     */
    public function setContactName($contact_name)
    {
        
        $this->contact_name = $contact_name;
        return $this;
    }
    
    /**
     * Gets time_zone
     * @return string
     */
    public function getTimeZone()
    {
        return $this->time_zone;
    }
  
    /**
     * Sets time_zone
     * @param string $time_zone Time Zone
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        
        $this->time_zone = $time_zone;
        return $this;
    }
    
    /**
     * Gets fte_count
     * @return int
     */
    public function getFteCount()
    {
        return $this->fte_count;
    }
  
    /**
     * Sets fte_count
     * @param int $fte_count FTE Student Count
     * @return $this
     */
    public function setFteCount($fte_count)
    {
        
        $this->fte_count = $fte_count;
        return $this;
    }
    
    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->notes;
    }
  
    /**
     * Sets notes
     * @param string $notes Additional Notes
     * @return $this
     */
    public function setNotes($notes)
    {
        
        $this->notes = $notes;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
